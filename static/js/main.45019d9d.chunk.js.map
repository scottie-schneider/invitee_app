{"version":3,"sources":["GuestName.js","Guest.js","PendingGuest.js","GuestList.js","Counter.js","App.js","serviceWorker.js","index.js"],"names":["GuestName","props","isEditing","react_default","a","createElement","type","value","children","onChange","handleNameEdits","Guest","src_GuestName","e","setName","target","name","checked","isConfirmed","handleConfirmation","onClick","handleToggleEditing","handleRemove","PendingGuest","className","GuestList","src_PendingGuest","pendingGuest","guests","filter","guest","isFiltered","map","index","src_Guest","key","toggleConfirmationAt","toggleEditingAt","text","setNameAt","removeGuestAt","Counter","numberAttending","numberUnconfirmed","totalInvited","App","state","toggleGuestPropertyAt","property","indexToChange","_this","setState","Object","objectSpread","defineProperty","concat","toConsumableArray","slice","toggleFilter","handleNameInput","newGuestSubmitHandler","preventDefault","getTotalInvited","length","getAttendingGuests","reduce","total","this","onSubmit","placeholder","src_Counter","src_GuestList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45019d9d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst GuestName = props => {\n  if(props.isEditing){\n    return (\n      <input\n        type=\"text\"\n        value={props.children}\n        onChange={props.handleNameEdits}\n        />\n    );\n  }\n  return (\n    <span>\n      {props.children}\n    </span>\n  )\n}\n\nGuestName.propTypes = {\n  isEditing: PropTypes.bool.isRequired,\n  handleNameEdits: PropTypes.func.isRequired\n};\n\nexport default GuestName;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport GuestName from './GuestName';\n\nconst Guest = props =>\n  <li>\n    <GuestName\n      isEditing={props.isEditing}\n      handleNameEdits={e => props.setName(e.target.value)}>\n      {props.name}\n      </GuestName>\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={props.isConfirmed}\n        onChange={props.handleConfirmation}\n        /> Confirmed\n    </label>\n    <button onClick={props.handleToggleEditing}>\n      {props.isEditing ? \"save\" : \"edit\"}\n    </button>\n    <button onClick={props.handleRemove}>remove</button>\n  </li>\n\nGuest.propTypes = {\n  name: PropTypes.string.isRequired,\n  isConfirmed: PropTypes.bool.isRequired,\n  isEditing: PropTypes.bool.isRequired,\n  handleConfirmation: PropTypes.func.isRequired,\n  handleToggleEditing: PropTypes.func.isRequired,\n  setName: PropTypes.func.isRequired,\n  handleRemove: PropTypes.func.isRequired\n};\n\nexport default Guest;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PendingGuest = props => {\n  if(props.name){\n    return(\n      <li>\n        <span className=\"pending\">\n          {props.name}\n          </span>\n      </li>\n    );\n  }\n  return null\n};\n\n\nPendingGuest.propTypes = {\n  name: PropTypes.string.isRequired\n};\n\nexport default PendingGuest;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Guest from './Guest';\nimport PendingGuest from './PendingGuest'\n\nconst GuestList = props =>\n<ul>\n  <PendingGuest name={props.pendingGuest}/>\n  {props.guests\n    .filter(guest => !props.isFiltered || guest.isConfirmed)\n    .map((guest, index) =>\n    <Guest\n      key={index}\n      name={guest.name}\n      isConfirmed={guest.isConfirmed}\n      isEditing={guest.isEditing}\n      handleConfirmation={() => props.toggleConfirmationAt(index)}\n      handleToggleEditing={() => props.toggleEditingAt(index)}\n      setName={text => props.setNameAt(text, index)}\n      handleRemove={() => props.removeGuestAt(index)}\n      />\n  )}\n</ul>\n\nGuestList.propTypes = {\n  guests: PropTypes.array.isRequired,\n  toggleConfirmationAt: PropTypes.func.isRequired,\n  toggleEditingAt: PropTypes.func.isRequired,\n  setNameAt: PropTypes.func.isRequired,\n  isFiltered: PropTypes.bool.isRequired,\n  removeGuestAt: PropTypes.func.isRequired,\n  pendingGuest: PropTypes.string.isRequired\n}\n\nexport default GuestList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Counter = props => {\n  return (\n    <table className=\"counter\">\n      <tbody>\n        <tr>\n          <td>Attending:</td>\n          <td>{props.numberAttending}</td>\n        </tr>\n        <tr>\n          <td>Unconfirmed:</td>\n          <td>{props.numberUnconfirmed}</td>\n        </tr>\n        <tr>\n          <td>Total:</td>\n          <td>{props.totalInvited}</td>\n        </tr>\n      </tbody>\n    </table>\n  )\n};\nCounter.propTypes = {\n  numberAttending: PropTypes.number,\n  numberUnconfirmed: PropTypes.number,\n  totalInvited: PropTypes.number\n}\n\nexport default Counter;\n","import React, { Component } from 'react';\nimport GuestList from './GuestList';\nimport Counter from './Counter';\n\nclass App extends Component {\n  \n  state = {\n    isFiltered: false,\n    pendingGuest: \"\",\n    guests: [\n      {\n        name: 'Treasure',\n        isConfirmed: false,\n        isEditing: false\n      },\n      {\n        name: 'Nick',\n        isConfirmed: true,\n        isEditing: false\n      },\n      {\n        name: 'Susan',\n        isConfirmed: true,\n        isEditing: true\n      }\n    ]\n  }\n  \n  toggleGuestPropertyAt = (property, indexToChange) =>\n      this.setState({\n        guests: this.state.guests.map((guest, index) => {\n          if(index === indexToChange){\n            return {\n              ...guest,\n              [property]: !guest[property]\n            };\n          }\n          return guest;\n        })\n      });\n  \n    setNameAt = (name, indexToChange) =>\n        this.setState({\n          guests: this.state.guests.map((guest, index) => {\n            if(index === indexToChange){\n              return {\n                ...guest,\n                name\n              };\n            }\n            return guest;\n          })\n        });\n          \n  toggleConfirmationAt = index =>\n    this.toggleGuestPropertyAt(\"isConfirmed\", index);\n\n  removeGuestAt = index =>\n    this.setState({\n      guests: [\n        ...this.state.guests.slice(0, index),\n        ...this.state.guests.slice(index + 1)\n      ]\n    })\n    \n  toggleEditingAt = index =>\n    this.toggleGuestPropertyAt(\"isEditing\", index);\n    \n  toggleFilter = () =>\n    this.setState({ isFiltered: !this.state.isFiltered });\n    \n  handleNameInput = (e) =>\n    this.setState({ pendingGuest: e.target.value })\n    \n  newGuestSubmitHandler = (e) => {\n    e.preventDefault();\n    this.setState({\n      guests: [\n        {\n          name: this.state.pendingGuest,\n          isConfirmed: false,\n          isEditing: false\n        },\n        ...this.state.guests\n      ],\n      pendingGuest: ''\n    });\n  }\n\n  getTotalInvited = () => this.state.guests.length;\n  \n  getAttendingGuests = () =>\n    this.state.guests.reduce(\n      (total, guest) =>  guest.isConfirmed ? total + 1 : total,\n    0);\n\n  \n  render() {\n    const totalInvited = this.getTotalInvited();\n    const numberAttending = this.getAttendingGuests();\n    const numberUnconfirmed = totalInvited - numberAttending;\n    \n    return (\n      <div className=\"App\">\n        <header>\n          <h1>RSVP</h1>\n          <p>A Scottie Schneider App</p>\n          <form onSubmit={this.newGuestSubmitHandler}>\n              <input\n                type=\"text\"\n                value={this.state.pendingGuest}\n                placeholder=\"Invite Someone\"\n                onChange={this.handleNameInput}\n              />\n              <button type=\"submit\" name=\"submit\" value=\"submit\">Submit</button>\n          </form>\n        </header>\n        <div className=\"main\">\n          <div>\n            <h2>Invitees</h2>\n            <label>\n              <input\n                type=\"checkbox\"\n                onChange={this.toggleFilter}\n                checked={this.state.isFiltered}\n              /> Hide those who haven't responded\n            </label>\n          </div>\n          <Counter\n            totalInvited={totalInvited}\n            numberAttending={numberAttending}\n            numberUnconfirmed={numberUnconfirmed}\n            />\n          <GuestList\n            guests={this.state.guests}\n            toggleConfirmationAt={this.toggleConfirmationAt}\n            toggleEditingAt={this.toggleEditingAt}\n            setNameAt={this.setNameAt}\n            isFiltered={this.state.isFiltered}\n            removeGuestAt={this.removeGuestAt}\n            pendingGuest={this.state.pendingGuest}\n            />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}